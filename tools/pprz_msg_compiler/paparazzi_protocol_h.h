/* 
	AUTOGENERATED: Do not change this file here! Generated by:
	$Id: templater.cpp 6153 2011-08-01 14:39:19Z coendewagter $
 */

#include <time.h>
#include <string>
#include <fstream>


class paparazzi_protocol_h_tpl_class
{
public:
	paparazzi_protocol_h_tpl_class()
	{
		init = "";
		structs = "";
		send = "";
		to_ivy = "";
		print = "";
		ivy = "";
		switcher = "";
		cbfunc = "";
		privdat = "";
		rest = "";
	}
	void open(const char* filename){file.open(filename);}
private:
	std::ofstream file;

	std::string init; // block 0: init
	std::string structs; // block 1: structs
	std::string send; // block 2: send
	std::string to_ivy; // block 3: to_ivy
	std::string print; // block 4: print
	std::string ivy; // block 5: ivy
	std::string switcher; // block 6: switcher
	std::string cbfunc; // block 7: cbfunc
	std::string privdat; // block 8: privdat
	std::string rest; // block 9: rest

public:
	void add_init(const char* _txt1, const char* _txt2)
	{
		init.append("		memset(&this->");
		init.append(_txt1);
		init.append(", 0, sizeof(");
		init.append(_txt2);
		init.append("_pprz_struct));\n\n");
	};
	void add_structs(const char* _txt1, const char* _txt2, const char* _txt3)
	{
		structs.append("	struct ");
		structs.append(_txt1);
		structs.append("_pprz_struct\n\n	{\n\n");
		structs.append(_txt2);
		structs.append("	} ");
		structs.append(_txt3);
		structs.append("\n\n#if defined(__GNUC__)\n\n__attribute__((packed))\n\n#endif\n\n;\n\n\n\n");
	};
	void add_send(const char* _txt1, const char* _txt2, const int _nr3, const int _nr4)
	{
		send.append("	void send_");
		send.append(_txt1);
		send.append("() { send( (void*) &this->");
		send.append(_txt2);
		send.append(", ");
		char tijdelijk[32];
		sprintf(tijdelijk,"%d",_nr3);
		send.append(tijdelijk);
		send.append(", ");
		sprintf(tijdelijk,"%d",_nr4);
		send.append(tijdelijk);
		send.append(" ); }\n\n");
	};
	void add_to_ivy(const char* _txt1, const char* _txt2, const char* _txt3)
	{
		to_ivy.append("	std::string ");
		to_ivy.append(_txt1);
		to_ivy.append("_to_ivy()\n\n	{\n\n		std::stringstream ivy;\n\n\n\n		ivy << this->ac_id <<  \" ");
		to_ivy.append(_txt2);
		to_ivy.append("\";\n\n");
		to_ivy.append(_txt3);
		to_ivy.append("\n\n\n\n		return ivy.str();\n\n	}\n\n");
	};
	void add_print(const char* _txt1, const char* _txt2, const int _nr3, const char* _txt4)
	{
		print.append("	void print_");
		print.append(_txt1);
		print.append("()\n\n	{\n\n		printf(\"Received msg '%s' (%d)\\n\",\"");
		print.append(_txt2);
		print.append("\",");
		char tijdelijk[32];
		sprintf(tijdelijk,"%d",_nr3);
		print.append(tijdelijk);
		print.append(");\n\n");
		print.append(_txt4);
		print.append("	}\n\n");
	};
	void add_ivy(const char* _txt1, const char* _txt2, const char* _txt3, const int _nr4)
	{
		ivy.append("		if (msg_name.compare(\"");
		ivy.append(_txt1);
		ivy.append("\") == 0)\n\n		{\n\n");
		ivy.append(_txt2);
		ivy.append("			print_");
		ivy.append(_txt3);
		ivy.append("();\n\n			return ");
		char tijdelijk[32];
		sprintf(tijdelijk,"%d",_nr4);
		ivy.append(tijdelijk);
		ivy.append(";\n\n		}\n\n");
	};
	void add_switcher(const int _nr1, const char* _txt2, const char* _txt3, const int _nr4, const char* _txt5)
	{
		switcher.append("		case ");
		char tijdelijk[32];
		sprintf(tijdelijk,"%d",_nr1);
		switcher.append(tijdelijk);
		switcher.append(":	// ");
		switcher.append(_txt2);
		switcher.append("\n\n			memcpy(&this->");
		switcher.append(_txt3);
		switcher.append(",&(port->buffer[4]),");
		sprintf(tijdelijk,"%d",_nr4);
		switcher.append(tijdelijk);
		switcher.append(");\n\n			print_");
		switcher.append(_txt5);
		switcher.append("();\n\n			break;\n\n");
	};
	void add_cbfunc(const char* _txt1, const char* _txt2, const char* _txt3)
	{
		cbfunc.append("	inline void ");
		cbfunc.append(_txt1);
		cbfunc.append("_set_interrupt(Cb_Class *_inst, void (Cb_Class::*f) (void*))\n\n	{\n\n		");
		cbfunc.append(_txt2);
		cbfunc.append("_Instance = _inst; ");
		cbfunc.append(_txt3);
		cbfunc.append("_func_p = f;\n\n	}\n\n");
	};
	void add_privdat(const char* _txt1, const char* _txt2)
	{
		privdat.append("	void (Cb_Class::*");
		privdat.append(_txt1);
		privdat.append("_func_p) (void*);\n\n	Cb_Class *");
		privdat.append(_txt2);
		privdat.append("_Instance;\n\n");
	};
public:
	void commit()
	{
		time_t aclock;
		time( &aclock );
		file << "/*\n"
				"\tAUTOGENERATED: Do not change this file here! Generated by:\n"
				"\t" __FILE__ "\n"
				"\tCompiled on: ";
		file << asctime( localtime( &aclock ) );
		file << "\n*/\n\n";
		file <<	"/****************************************************************\n"
				"\n"
				"*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\n"
				"\n"
				"*\t\t\t\t------ SmartUAV Project ------\t\t\t\t\t*\n"
				"\n"
				"*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\n"
				"\n"
				"*\tAerospace Software and Technologies Institue\tASTI\t\t*\n"
				"\n"
				"*\tDelft Cooperation for Intelligent Systems\t\tDECIS\t\t*\n"
				"\n"
				"*\tDelft University of Technology\t\t\t\t\tTU Delft\t*\n"
				"\n"
				"*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\n"
				"\n"
				"*\tM. Amelink - C. De Wagter\t\t\t\t\t\t\t\t\t*\n"
				"\n"
				"*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\n"
				"\n"
				"*\t$Id: paparazzi_protocol_h.tpl $\n"
				"\n"
				"*\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*\n"
				"\n"
				"****************************************************************/\n"
				"\n"
				"\n"
				"\n"
				"// Includes\n"
				"\n"
				"#ifndef __MY_PAPARAZZI_PROTOCOL_HEADER__\n"
				"\n"
				"#define __MY_PAPARAZZI_PROTOCOL_HEADER__\n"
				"\n"
				"\n"
				"\n"
				"#include \"Fdc.h\"\n"
				"\n"
				"#include \"MyStdLib.h\"\n"
				"\n"
				"\n"
				"\n"
				"#include <string>\n"
				"\n"
				"#include <sstream>\n"
				"\n"
				"#include <iterator>\n"
				"\n"
				"#include <vector>\n"
				"\n"
				"// included for itoa\n"
				"\n"
				"#include <stdio.h>\n"
				"\n"
				"#include <stdlib.h>\n"
				"\n"
				"\n"
				"\n"
				"#if defined(WIN32)\n"
				"\n"
				"#pragma pack(push)\n"
				"\n"
				"#pragma pack(1)\n"
				"\n"
				"#endif\n"
				"\n"
				"\n"
				"\n"
				"#ifdef DEBUG\n"
				"\n"
				"#undef DEBUG\n"
				"\n"
				"#define DEBUG DEBUK\n"
				"\n"
				"#endif\n"
				"\n"
				"\n"
				"\n"
				"template <class Cb_Class>\n"
				"\n"
				"class paparazzi_protocol\n"
				"\n"
				"{\n"
				"\n"
				"public:\n"
				"\n"
				"\n"
				"\n"
				"\tpaparazzi_protocol(struct Fdc* s)\n"
				"\n"
				"\t{\n"
				"\n"
				"";
		file <<	init;
		file <<	"\t\tport = s;\n"
				"\n"
				"\t}\n"
				"\n"
				"\n"
				"\n"
				"";
		file <<	structs;
		file <<	"\n"
				"\n"
				"public:\n"
				"\n"
				"";
		file <<	send;
		file <<	"\n"
				"\n"
				"\n"
				"\n"
				"";
		file <<	to_ivy;
		file <<	"\n"
				"\n"
				"\tvoid split(const std::string input, std::vector<std::string> &results)\n"
				"\n"
				"\t{\n"
				"\n"
				"\t\tconst string& delimiter = \" \";\n"
				"\n"
				"\t\tconst bool includeEmpties = true;\n"
				"\n"
				"\n"
				"\n"
				"\t\tint iPos = 0;\n"
				"\n"
				"\t\tint newPos = -1;\n"
				"\n"
				"\t\tint sizeS2 = (int)delimiter.size();\n"
				"\n"
				"\t\tint isize = (int)input.size();\n"
				"\n"
				"\n"
				"\n"
				"\t\tif( \n"
				"\n"
				"\t\t\t( isize == 0 )\n"
				"\n"
				"\t\t\t||\n"
				"\n"
				"\t\t\t( sizeS2 == 0 )\n"
				"\n"
				"\t\t)\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\treturn;\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tvector<int> positions;\n"
				"\n"
				"\n"
				"\n"
				"\t\tnewPos = input.find (delimiter, 0);\n"
				"\n"
				"\n"
				"\n"
				"\t\tif( newPos < 0 )\n"
				"\n"
				"\t\t{ \n"
				"\n"
				"\t\t\treturn; \n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tint numFound = 0;\n"
				"\n"
				"\n"
				"\n"
				"\t\twhile( newPos >= iPos )\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\tnumFound++;\n"
				"\n"
				"\t\t\tpositions.push_back(newPos);\n"
				"\n"
				"\t\t\tiPos = newPos;\n"
				"\n"
				"\t\t\tnewPos = input.find (delimiter, iPos+sizeS2);\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tif( numFound == 0 )\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\treturn;\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tfor( int i=0; i <= (int)positions.size(); ++i )\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\tstring s(\"\");\n"
				"\n"
				"\t\t\tif( i == 0 ) \n"
				"\n"
				"\t\t\t{ \n"
				"\n"
				"\t\t\t\ts = input.substr( i, positions[i] ); \n"
				"\n"
				"\t\t\t}\n"
				"\n"
				"\t\t\tint offset = positions[i-1] + sizeS2;\n"
				"\n"
				"\t\t\tif( offset < isize )\n"
				"\n"
				"\t\t\t{\n"
				"\n"
				"\t\t\t\tif( i == positions.size() )\n"
				"\n"
				"\t\t\t\t{\n"
				"\n"
				"\t\t\t\t\ts = input.substr(offset);\n"
				"\n"
				"\t\t\t\t}\n"
				"\n"
				"\t\t\t\telse if( i > 0 )\n"
				"\n"
				"\t\t\t\t{\n"
				"\n"
				"\t\t\t\t\ts = input.substr( positions[i-1] + sizeS2, \n"
				"\n"
				"\t\t\t\t\t\t  positions[i] - positions[i-1] - sizeS2 );\n"
				"\n"
				"\t\t\t\t}\n"
				"\n"
				"\t\t\t}\n"
				"\n"
				"\t\t\tif( includeEmpties || ( s.size() > 0 ) )\n"
				"\n"
				"\t\t\t{\n"
				"\n"
				"\t\t\t\tresults.push_back(s);\n"
				"\n"
				"\t\t\t}\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\t\treturn;\n"
				"\n"
				"\t}\n"
				"\n"
				"\n"
				"\n"
				"";
		file <<	print;
		file <<	"\n"
				"\n"
				"\n"
				"\n"
				"\n"
				"\n"
				"\tint ivy_decode(const char* _msg)\n"
				"\n"
				"\t{\n"
				"\n"
				"\t\tstd::stringstream vals;\n"
				"\n"
				"\t\tvals.str(_msg);\n"
				"\n"
				"\t\tstd::string msg_name;\n"
				"\n"
				"\t\tstd::vector<std::string> msg;\n"
				"\n"
				"\t\tsplit(_msg, msg);\n"
				"\n"
				"\n"
				"\n"
				"\t\tif (msg.size() < 2)\n"
				"\n"
				"\t\t{\t\n"
				"\n"
				"\t\t\tE_printf(\"Msg Error: too short\\n\");\n"
				"\n"
				"\t\t\treturn -1;\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tvals >> this->ac_id;\n"
				"\n"
				"\t\tvals >> msg_name;\n"
				"\n"
				"\n"
				"\n"
				"";
		file <<	ivy;
		file <<	"\t\treturn -2;\n"
				"\n"
				"\t}\n"
				"\n"
				"\n"
				"\n"
				"\tint receive()\n"
				"\n"
				"\t{\n"
				"\n"
				"\t\t// Read\n"
				"\n"
				"\t\tfdcRead(port);\n"
				"\n"
				"\n"
				"\n"
				"\t\t// Search for start-byte\n"
				"\n"
				"\t\twhile ( (port->bytesread > 0) &&\n"
				"\n"
				"\t\t\t\t(port->buffer[0] != 0x99) )\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\tfdcBufCrop(port,1);\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\t// Check Length\n"
				"\n"
				"\t\tint l = (unsigned char) port->buffer[1]-4;\n"
				"\n"
				"\t\tif ((int)port->bytesread < (l+4))\n"
				"\n"
				"\t\t\treturn 0;\n"
				"\n"
				"\n"
				"\n"
				"\t\t// Verify Checksum\n"
				"\n"
				"\t\tunsigned char ck_a;\n"
				"\n"
				"\t\tunsigned char ck_b;\n"
				"\n"
				"\t\tck_a = port->buffer[1];\n"
				"\n"
				"\t\tck_b = port->buffer[1];\n"
				"\n"
				"\t\tfor (int i=0;i<l;i++)\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\tck_a += port->buffer[2+i];\n"
				"\n"
				"\t\t\tck_b += ck_a;\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\t\tif ((port->buffer[2+l] != ck_a) ||\n"
				"\n"
				"\t\t\t(port->buffer[3+l] != ck_b))\n"
				"\n"
				"\t\t{\t\n"
				"\n"
				"\t\t\tE_printf(\"Decoding Checksum Error\\n\");\n"
				"\n"
				"\t\t\tE_printf(\"CK: %X %X %X %X \\n\",ck_a,ck_b,port->buffer[2+l],port->buffer[3+l]);\n"
				"\n"
				"\t\t\t//fdcBufCrop(port,l+4);\n"
				"\n"
				"\t\t\t//return -1;\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tac_id = port->buffer[2];\n"
				"\n"
				"\t\tint msgid = port->buffer[3];\n"
				"\n"
				"\t\tswitch (msgid)\n"
				"\n"
				"\t\t{\n"
				"\n"
				"";
		file <<	switcher;
		file <<	"\t\t}\n"
				"\n"
				"\t\tfdcBufCrop(port,l+4);\n"
				"\n"
				"\t\treturn msgid;\n"
				"\n"
				"\t}\n"
				"\n"
				"\n"
				"\n"
				"private:\n"
				"\n"
				"\tvoid send(void *p, unsigned char t, int len)\n"
				"\n"
				"\t{\n"
				"\n"
				"\t\tunsigned char cs_a, cs_b;\n"
				"\n"
				"\n"
				"\n"
				"\t\tcs_a = (unsigned char) (len+2);\n"
				"\n"
				"\t\tcs_b = cs_a;\n"
				"\n"
				"\n"
				"\n"
				"\t\tbuff[0] = 0x99;\n"
				"\n"
				"\t\tbuff[1] = cs_a;\n"
				"\n"
				"\t\tbuff[2] = ac_id;\n"
				"\n"
				"\t\tbuff[3] = t;\n"
				"\n"
				"\n"
				"\n"
				"\t\tmemcpy(&(buff[4]),p, len);\n"
				"\n"
				"\n"
				"\n"
				"\t\tfor (int i=0;i<(len+2);i++)\n"
				"\n"
				"\t\t{\n"
				"\n"
				"\t\t\tcs_a += buff[2+len];\n"
				"\n"
				"\t\t\tcs_b += cs_a;\n"
				"\n"
				"\t\t}\n"
				"\n"
				"\n"
				"\n"
				"\t\tbuff[4+len] = cs_a;\n"
				"\n"
				"\t\tbuff[5+len] = cs_b;\n"
				"\n"
				"\n"
				"\n"
				"\t\tfdcWrite(port,(char*)buff,len+6);\n"
				"\n"
				"\t}\n"
				"\n"
				"\n"
				"\n"
				"public:\n"
				"\n"
				"\tint ac_id;\n"
				"\n"
				"\n"
				"\n"
				"";
		file <<	cbfunc;
		file <<	"\n"
				"\n"
				"private:\n"
				"\n"
				"\tstruct Fdc* port;\n"
				"\n"
				"\tunsigned char buff[264];\n"
				"\n"
				"\n"
				"\n"
				"";
		file <<	privdat;
		file <<	"\n"
				"\n"
				"\n"
				"\n"
				"\n"
				"\n"
				"};\n"
				"\n"
				"\n"
				"\n"
				"#if defined(WIN32)\n"
				"\n"
				"#pragma pack(pop)\n"
				"\n"
				"#endif\n"
				"\n"
				"\n"
				"\n"
				"\n"
				"\n"
				"#endif\n"
				"";
		file <<	rest;
	}
} paparazzi_protocol_h ;

