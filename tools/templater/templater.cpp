#include <iostream>
#include <fstream>
#include <time.h>
#include <string>
#include <vector>
#include <string.h>
#include <stdlib.h>

class TextBlock
{
public:
	TextBlock(std::string _nme, std::string _txt, std::string _rpt){ name = _nme; txt = _txt; repeat = _rpt;};
	~TextBlock(){};

	void addLine(std::string _txt){ txt.append(_txt); }
	const char* getRepeat(void){ return repeat.c_str(); }
	const std::string getText(void){ return txt; }
	const std::string getName(void){ return name; }
private:
	std::string name;
	std::string txt;
	std::string repeat;
};


int main(int argc, char** argv)
{
	std::ifstream in;
	std::ofstream outfile;
	int i,j;

	std::vector<TextBlock*> content;

	
	// CHECK ARGUMENTS
	if ((argc != 3) && (argc != 4))
	{
		std::cout << "use: tplc file.tpl dest.h\n";
		std::cout << "     tplc file.tpl dest.h /M (for matlab)\n";
		return -1;
	}

	// GET CLASSNAME FROM FILENAME
	std::string filename = argv[1];
	std::string classname = filename.substr(filename.find_last_of("/\\",filename.length())+1,
											filename.find_last_of(".",filename.length())-filename.find_last_of("/\\",filename.length())-1);

	// std::cout << "Template " << classname.c_str() << ".tpl\n";

	/////////////////////////////////
	// LOAD TEMPLATE FILE
	in.open(argv[1]);
	std::string tekstje = "";
	std::string repeater = "";
	std::string naamke = "";
	std::string *container = &tekstje;
	while (in.good())
	{
		char line[1024];
		in.getline(line,1024,'\n');

		//std::cout << line << std::endl;

		if ( 
				(line[0] == '<') &&
				(line[1] == 'r') &&
				(line[2] == 'e') &&
				(line[3] == 'p') &&
				(line[4] == 'e') &&
				(line[5] == 'a') &&
				(line[6] == 't') && 
				(line[7] == ' ') && 
				(line[8] == 'n') && 
				(line[9] == 'a') && 
				(line[10] == 'm') && 
				(line[11] == 'e') && 
				(line[12] == '=') && 
				(line[13] == '\"') 
			)
		{
			container = &repeater;
			repeater = "";
				
			std::string tijdelijk = line;
#ifdef WIN32
			naamke = tijdelijk.substr(14,strlen(line)-16);
#else
			naamke = tijdelijk.substr(14,strlen(line)-17);
#endif
			// std::cout << "NEW REPEAT BLOCK!!!!!!!\n";

		}
		else if (	(container == &repeater) && 
				(line[0] == '<') &&
				(line[1] == '/') &&
				(line[2] == 'r') &&
				(line[3] == 'e') &&
				(line[4] == 'p') &&
				(line[5] == 'e') &&
				(line[6] == 'a') )
		{
			//std::cout << "-------TXT------\n" << tekstje << "------RPT------\n" << repeater << std::endl;
			container = &tekstje;
			content.push_back(new TextBlock(naamke,tekstje,repeater));
			tekstje = "";
			repeater = "";
		}
		else
		{
			container->append(line);
			container->append("\n");
		}
	}
	content.push_back(new TextBlock("rest",tekstje,""));
	in.close();
	//	std::cout << "-------TXT------\n" << tekstje << std::endl;

	
	/////////////////////////////////
	// WRITE INCLUDE FILE:
	outfile.open(argv[2]);
	time_t aclock;
	time( &aclock );
	// Autogen

	outfile		<<	"/* \n"
				<<	"\tAUTOGENERATED: Do not change this file here! Generated by:\n"
				<<	"\t$Id: templater.cpp 6153 2011-08-01 14:39:19Z coendewagter $\n"
				//<<	"\tCompiled on: "
				//<<	asctime( localtime( &aclock ) )
				<<	" */\n"
				<<	"\n"
				<<	"#include <time.h>\n"
				<<	"#include <string>\n"
				<<	"#include <fstream>\n"
				<<	"\n";
	// Class
	outfile		<<	"\n"
				<<	"class "	<< classname.c_str() << "_tpl_class\n"
				<<	"{\n"
				<<	"public:\n"
				<<	"	" << classname.c_str() << "_tpl_class()\n\t{\n";
	// Constructor: strings = ""
	for (i = 0; i < ((int) content.size()); i++)
	{
		outfile <<	"		" << content[i]->getName() << " = \"\";\n";
	}
	outfile		<<	"	}\n"
				<<	"	void open(const char* filename){file.open(filename);}\n"
				<<	"private:\n"
				<<	"	std::ofstream file;\n\n";
	// Private strings
	for (i = 0; i < ((int) content.size()); i++)
	{
		outfile <<	"	std::string " << content[i]->getName() << "; // block " << i << ": " << content[i]->getName() << "\n";
	}
	outfile		<<	"\npublic:\n";
	// Accessors
	for (i = 0; i < ((int) content.size()-1); i++)
	{
		int k = 0;
		outfile <<	"	void add_" << content[i]->getName() << "(";
		int count = 0;
		char *tmp = (char*) content[i]->getRepeat();
		for (k=0;k<(int)strlen(tmp);k++)
		{
			if ((tmp[k] == '%') && ((k+1)<(int)strlen(tmp)) )
			{
				if (tmp[k+1] == '%')
				{
					k++;
					continue;
				}
				else
				{
					count++;
				}
				if (count > 1)
					outfile << ", ";
				if (tmp[k+1] == 's')
					outfile << "const char* _txt" << count;
				else if (tmp[k+1] == 'd')
					outfile << "const int _nr" << count;
				else
					outfile << "const int _err" << count;
			}
		}
		outfile << ")\n\t{\n";

		outfile	<< "\t\t" << content[i]->getName() << ".append(\"";
		count = 0;
		int firstnumber = 1;
		for (k=0;k<(int)strlen(tmp);k++)
		{
			if ((tmp[k] == '%') && ((k+1)<(int)strlen(tmp)) && (tmp[k+1] != '%'))
			{
				count++;
				outfile << "\");\n";
				if (tmp[k+1] == 's')
				{
					outfile	<< "\t\t" << content[i]->getName() << ".append(_txt" << count << ");\n";
				}
				else
				{
					if (firstnumber == 1)
					{
						outfile << "\t\tchar tijdelijk[32];\n";
						firstnumber = 0;
					}
					outfile	<< "\t\tsprintf(tijdelijk,\"%d\",_nr" << count << ");\n\t\t" << content[i]->getName() << ".append(tijdelijk);\n";
				}
				k++;
				outfile	<< "\t\t" << content[i]->getName() << ".append(\"";

			}
			else if (tmp[k] == '\"')
			{
				outfile << "\\\"";
			}
			else if (tmp[k] == '%')
			{
				outfile << "%";
				k	++;
			}
			else if (tmp[k] == '\\')
			{
				outfile << "\\\\";
			}
			else if ((tmp[k] == '\n') || (tmp[k] == '\r'))
			{
				outfile << "\\n";
			}
			else
			{
				outfile << tmp[k];
			}
		}
		outfile << "\");\n";

		outfile <<	"	};\n";
	}
	// Commit
	outfile		<<	"public:\n"
				<<	"	void commit()\n"
				<<	"	{\n"
				<<	"		time_t aclock;\n"
				<<	"		time( &aclock );\n";
	if (argc == 4)
	{
		outfile	<<	"		file << \"%%\\n\"\n"
				<<	"				\"%\\tAUTOGENERATED: Do not change this file here! Generated by:\\n\"\n"
				<<	"				\"%\\t\" __FILE__ \"\\n\"\n"
				<<	"				\"%\\tCompiled on: \";\n"
				<<	"		file << asctime( localtime( &aclock ) );\n"
				<<	"		file << \"\\n%\\n\\n\";\n";
	}
	else
	{
		outfile	<<	"		file << \"/*\\n\"\n"
				<<	"				\"\\tAUTOGENERATED: Do not change this file here! Generated by:\\n\"\n"
				<<	"				\"\\t\" __FILE__ \"\\n\"\n"
				<<	"				\"\\tCompiled on: \";\n"
				<<	"		file << asctime( localtime( &aclock ) );\n"
				<<	"		file << \"\\n*/\\n\\n\";\n";
	}

	for (i = 0; i < ((int) content.size()); i++)
	{
		outfile	<< 	"		file <<	\"";
		std::string tmpstr = content[i]->getText();
		char* tmp = (char*) tmpstr.c_str();

		for (j=0;j<(int)strlen(tmp);j++)
		{
			if ( (tmp[j] == '\"') || (tmp[j] == '\\'))
			{
				outfile << "\\" << tmp[j];
			}
			else if ( (tmp[j] == '\n') || (tmp[j] == '\r'))
			{
				outfile << "\\n\"\n\t\t\t\t\"";
			}
			else if ( tmp[j] == '\t' )
			{
				outfile << "\\t";
			}
			else
			{
				outfile << tmp[j];
			}
		}
		outfile	<<	"\";\n"
				<<	"		file <<	" << content[i]->getName() << ";\n";
	}
	outfile		<<	"	}\n"
				<<	"} "
				<<	classname.c_str()
				<<	" ;\n\n";
	outfile.close();

	return 0;
}
